---
- name: Run distibution specific tasks
  include_tasks: "{{ item }}"
  with_first_found:
  - "initial-{{ ansible_distribution }}.yml"
  - "initial-{{ ansible_os_family }}.yml"
  when: not csf_installed

- name: Pull ConfigServer Firewall package
  ansible.builtin.get_url:
    url: "https://download.configserver.com/csf.tgz"
    dest: "{{ csf_tgz }}"
    mode: 0600
  become: true
  when: not csf_installed

- name: Extract csf.tgz
  ansible.builtin.unarchive:
    src: "{{ csf_tgz }}"
    dest: "{{ csf_unpack }}"
    remote_src: true
    creates: "{{ csf_unpack }}/csf/install.sh"
  become: true
  when: not csf_installed

- name: Install csf
  ansible.builtin.command:
    chdir: "{{ csf_unpack }}/csf"
    cmd: "sh {{ csf_unpack }}/csf/install.sh"
    creates: "/etc/csf/csf.conf"
  become: true
  when: not csf_installed

- name: Apply firewall configuration to /etc/csf/csf.conf
  ansible.builtin.template:
    src: "templates/{{ csf_conf_template }}"
    dest: /etc/csf/csf.conf
    owner: root
    group: root
    mode: 0600
  become: true
  notify:
    - Restart CSF
    - Restart LFD

- name: Apply csf.allow file to /etc/csf/csf.allow
  ansible.builtin.template:
    src: "templates/csf.allow.j2"
    dest: /etc/csf/csf.allow
    owner: root
    group: root
    mode: 0600
  become: true
  notify:
    - Restart CSF
    - Restart LFD

- name: Apply csf.deny file to /etc/csf/csf.deny
  ansible.builtin.template:
    src: "templates/csf.deny.j2"
    dest: /etc/csf/csf.deny
    owner: root
    group: root
    mode: 0600
  become: true
  notify:
    - Restart CSF
    - Restart LFD

- name: Apply csf.ignore file to /etc/csf/csf.ignore
  ansible.builtin.template:
    src: "templates/csf.ignore.j2"
    dest: /etc/csf/csf.ignore
    owner: root
    group: root
    mode: 0600
  become: true
  notify:
    - Restart CSF
    - Restart LFD

- name: Check if preconfiguration file exists
  ansible.builtin.stat:
    path: "{{ csf_presh }}"
  delegate_to: localhost
  register: csfpreconfiguration

- name: Copy preconfiguration file to /etc/csf/csfpre.sh
  ansible.builtin.copy:
    src: "{{ csf_presh }}"
    dest: /etc/csf/csfpre.sh
    owner: root
    group: root
    mode: "0700"
  become: true
  notify:
    - Restart CSF
    - Restart LFD
  when: csfpreconfiguration.stat.exists

- name: Check if postconfiguration file exists
  ansible.builtin.stat:
    path: "{{ csf_postsh }}"
  delegate_to: localhost
  register: csfpostconfiguration

- name: Copy postconfiguration file to /etc/csf/csfpost.sh
  ansible.builtin.copy:
    src: "{{ csf_postsh }}"
    dest: /etc/csf/csfpost.sh
    owner: root
    group: root
    mode: "0700"
  become: true
  notify:
    - Restart CSF
    - Restart LFD
  when: csfpostconfiguration.stat.exists

- name: Ensure CSF service is started and enabled
  ansible.builtin.service:
    name: csf
    state: started
    enabled: true
  become: true
  async: 15
  poll: 5
  register: csfstarted

- name: Ensure LFD service is started and enabled
  ansible.builtin.service:
    name: lfd
    state: started
    enabled: true
  become: true
  async: 15
  poll: 5
  register: lfdstarted
...
